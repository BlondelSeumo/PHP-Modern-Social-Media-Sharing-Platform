<script>
	"use strict";

	$(document).ready(function($) {

		Vue.use(window.vuelidate.default);

		var edit_profile_name_app = new Vue({
			el: "#edit_profile_name_form",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				invalid_feedback_fname: "",
				invalid_feedback_lname: "",
				invalid_feedback_uname: "",
				fname: "<?php echo($me["fname"]) ?>",
				lname: "<?php echo($me["lname"]) ?>",
				uname: "<?php echo($me["raw_uname"]) ?>",
				uname_taken: false
			},
			computed: {
				is_valid_fname: function() {
					if (this.$v.fname.required == true && this.$v.fname.$error) {
						this.invalid_feedback_fname = "<?php echo cl_translate("Please enter your first name, which is from 3 to 25 characters"); ?>";
						return true;
					}

					else {
						this.invalid_feedback_fname = "";
						return false;
					}
				},
				is_valid_lname: function() {
					if(this.$v.lname.required == true && this.$v.lname.$error) {
						this.invalid_feedback_lname = "<?php echo cl_translate("Please enter your last name, which is from 3 to 25 characters"); ?>";
						return true;
					}

					else {
						this.invalid_feedback_lname = "";
						return false;
					}
				},
				is_valid_uname: function() {
					if(this.$v.uname.required == true && this.$v.uname.$error) {
						this.invalid_feedback_uname = "<?php echo cl_translate("This username does not match the valid format. Please select a username of no more than 25 characters using only letters (a-z) numbers and underscores"); ?>";
						return true;
					}

					else if(this.uname_taken == true) {
						this.invalid_feedback_uname = "<?php echo cl_translate("This username is already taken, please select another"); ?>";
						return true;
					}

					else {
						this.invalid_feedback_uname = "";
						return false;
					}
				}
			},
			validations: {
				fname: {
					required: window.validators.required,
					min_length: window.validators.minLength(3),
					max_length: window.validators.maxLength(25),
				},
				lname: {
					required: window.validators.required,
					min_length: window.validators.minLength(3),
					max_length: window.validators.maxLength(25),
				},
				uname: {
					required: window.validators.required,
					min_length: window.validators.minLength(3),
					max_length: window.validators.maxLength(25),
					is_alpha_num: cl_uname_valid
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/save_profile_name"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							edit_profile_name_app.submitting  = true;
							edit_profile_name_app.uname_taken = false;
						},
						success: function(data) {
							if (data.status == 200) {

								$("div#edit_profile_name").modal('hide');

								setTimeout(function() {
									SMColibri.spa_reload();
								}, 1000);
							}

							else if(data.err_code && data.err_code == 'doubling_uname') {
								edit_profile_name_app.uname_taken = true;

								delay(function() {
									edit_profile_name_app.uname_taken = false;
								}, 5000);
							}

							else {
								edit_profile_name_app.unsuccessful_attempt = true;
							}
						},
						complete: function() {
							edit_profile_name_app.submitting = false;
						}
					});
				}
			}
		});

		var edit_profile_email_app = new Vue({
			el: "#edit_profile_email_form",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				invalid_feedback_email: "",
				email: "<?php echo($me["email"]) ?>",
				doubling_email: false
			},
			computed: {
				is_valid_email: function() {
					if (this.$v.email.required == true && this.$v.email.$error) {
						this.invalid_feedback_email = "<?php echo cl_translate("The email address you entered does not match the valid format."); ?>";
						return true;
					}

					else if(this.doubling_email == true) {
						this.invalid_feedback_email = "<?php echo cl_translate("This email address is already taken"); ?>";
						return true;
					}

					else {
						this.invalid_feedback_email = "";
						return false;
					}
				}
			},
			validations: {
				email: {
					required: window.validators.required,
					email: window.validators.email,
					min_length: window.validators.minLength(8),
					max_length: window.validators.maxLength(55),
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/save_profile_email"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							edit_profile_email_app.submitting = true;
							edit_profile_email_app.unsuccessful_attempt = false;
							edit_profile_email_app.doubling_email = false;
						},
						success: function(data) {
							if (data.status == 200) {

								$("div#edit_profile_email").modal('hide');

								setTimeout(function() {
									SMColibri.spa_reload();
								}, 1000);
							}

							else if(data.err_code == "doubling_email") {
								edit_profile_email_app.doubling_email = true;
								edit_profile_email_app.submitting = false;
							}

							else {
								edit_profile_email_app.unsuccessful_attempt = true;
								edit_profile_email_app.submitting = false;
							}
						}
					});
				}
			}
		});

		var edit_profile_siteurl_app = new Vue({
			el: "#edit_profile_siteurl_form",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				invalid_feedback_website: "",
				website: "<?php echo($me["website"]) ?>",
			},
			computed: {
				is_valid_url: function() {
					if (this.$v.website.$error) {
						this.invalid_feedback_website = "<?php echo cl_translate("The URL address you entered does not match the valid format."); ?>";
						return true;
					}

					else {
						this.invalid_feedback_website = "";
						return false;
					}
				}
			},
			validations: {
				website: {
					url: window.validators.url,
					max_length: window.validators.maxLength(115),
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/save_profile_url"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							edit_profile_siteurl_app.submitting = true;
							edit_profile_siteurl_app.unsuccessful_attempt = false;
						},
						success: function(data) {
							if (data.status == 200) {

								$("div#edit_profile_siteurl").modal('hide');

								setTimeout(function() {
									SMColibri.spa_reload();
								}, 1000);
							}

							else {
								edit_profile_siteurl_app.unsuccessful_attempt = true;
								edit_profile_siteurl_app.submitting = false;
							}
						}
					});
				}
			}
		});

		var edit_profile_bio_app = new Vue({
			el: "#edit_profile_bio_form",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				invalid_feedback_bio: "",
				bio: "<?php echo addslashes($me["about"]) ?>",
			},
			computed: {
				is_valid_bio: function() {
					if (this.$v.bio.$error) {
						this.invalid_feedback_bio = "<?php echo cl_translate("The text you entered is too long, the maximum length is 140 characters"); ?>";
						return true;
					}

					else {
						this.invalid_feedback_bio = "";
						return false;
					}
				}
			},
			validations: {
				bio: {
					max_length: window.validators.maxLength(140),
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/save_profile_bio"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							edit_profile_bio_app.submitting = true;
							edit_profile_bio_app.unsuccessful_attempt = false;
						},
						success: function(data) {
							if (data.status == 200) {

								$("div#edit_profile_bio").modal('hide');

								setTimeout(function() {
									SMColibri.spa_reload();
								}, 1000);
							}

							else {
								edit_profile_bio_app.unsuccessful_attempt = true;
								edit_profile_bio_app.submitting = false;
							}
						}
					});
				}
			}
		});

		var edit_profile_gender_app = new Vue({
			el: "#edit_profile_gender_form",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				gender: "<?php echo($me['gender']); ?>",
				dropdowns: {
					gender: "<?php echo cl_translate("Select your gender"); ?>"
				}
			},
			validations: {
				gender: {
					required: window.validators.required,
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/save_profile_gender"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							edit_profile_gender_app.submitting = true;
							edit_profile_gender_app.unsuccessful_attempt = false;
						},
						success: function(data) {
							if (data.status == 200) {

								$("div#edit_profile_gender").modal('hide');

								setTimeout(function() {
									SMColibri.spa_reload();
								}, 1000);
							}

							else {
								edit_profile_gender_app.unsuccessful_attempt = true;
								edit_profile_gender_app.submitting = false;
							}
						}
					});
				},
				dropdown_select: function(key = "none", val = false, e = false, on_change = false) {
                    var _app_ = this;

                    _app_.$v[key].$model = val;
                    _app_.dropdowns[key] = $.trim($(e.target).text());

                    if (on_change) {
                        on_change();
                    }
                }
			},
			mounted: function() {
				if (this.gender == 'F') {
					this.dropdowns.gender = "<?php echo cl_translate("Female"); ?>";
				}
				else {
					this.dropdowns.gender = "<?php echo cl_translate("Male"); ?>";
				}
			}
		});

		var edit_profile_password_app = new Vue({
			el: "#edit_profile_password_form",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				invalid_feedback_pass1: "",
				invalid_feedback_pass2: "",
				invalid_feedback_pass3: "",
				password1: "",
				password2: "",
				password3: "",
				invalid_curr_pass: false
			},
			computed: {
				is_valid_password1: function() {
					if (this.$v.password1.required == true && this.$v.password1.$error) {
						this.invalid_feedback_pass1 = "<?php echo cl_translate("Please enter your current password!"); ?>";
						return true;
					}

					else if(this.invalid_curr_pass == true) {
						this.invalid_feedback_pass1 = "<?php echo cl_translate("The current password you entered is not correct, please check your details and try again!"); ?>";
						return true;
					}

					else {
						this.invalid_feedback_pass1 = "";
						return false;
					}
				},
				is_valid_password2: function() {	
					if(this.$v.password2.required == true && this.$v.password2.$error) {
						this.invalid_feedback_pass2 = "<?php echo cl_translate("Please enter your new password, from 6 to 20 characters!"); ?>";
						return true;
					}

					else {
						this.invalid_feedback_pass2 = "";
						return false;
					}
				},
				is_valid_password3: function() {	
					if(this.$v.password3.required == true && this.$v.password3.$error) {
						this.invalid_feedback_pass3 = "<?php echo cl_translate("Passwords do not mutch!"); ?>";
						return true;
					}

					else {
						this.invalid_feedback_pass3 = "";
						return false;
					}
				}
			},
			validations: {
				password1: {
					required: window.validators.required,
					min_length: window.validators.minLength(6),
					max_length: window.validators.maxLength(20),
				},
				password2: {
					required: window.validators.required,
					min_length: window.validators.minLength(6),
					max_length: window.validators.maxLength(20),
				},
				password3: {
					required: window.validators.required,
					sameAs: window.validators.sameAs('password2')
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/save_profile_pass"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							edit_profile_password_app.submitting = true;
							edit_profile_password_app.unsuccessful_attempt = false;
							edit_profile_password_app.invalid_curr_pass = false;
						},
						success: function(data) {
							if (data.status == 200) {

								$("div#edit_profile_password").modal('hide');

								setTimeout(function() {
									SMColibri.spa_reload();
								}, 1000);
							}

							else if(data.err_code == "invalid_curr_pass") {
								edit_profile_password_app.invalid_curr_pass = true;
								edit_profile_password_app.submitting = false;
							}

							else {
								edit_profile_password_app.unsuccessful_attempt = true;
								edit_profile_password_app.submitting = false;
							}
						}
					});
				}
			}
		});

		var edit_profile_language_app = new Vue({
			el: "#edit_profile_language_form",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				language: "<?php fetch_or_get($me['language'], 'english'); ?>",
				dropdowns: {
					language: "<?php echo cl_translate("Select language"); ?>"
				},
				langs: <?php echo cl_minify_js(json($cl["languages"],1)); ?>
			},
			validations: {
				language: {
					required: window.validators.required,
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/save_profile_lang"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							edit_profile_language_app.submitting = true;
							edit_profile_language_app.unsuccessful_attempt = false;
						},
						success: function(data) {
							if (data.status == 200) {
								$(window).reloadPage(1200);
							}

							else {
								edit_profile_language_app.unsuccessful_attempt = true;
								edit_profile_language_app.submitting = false;
							}
						}
					});
				},
				dropdown_select: function(key = "none", val = false, e = false, on_change = false) {
                    var _app_ = this;

                    _app_.$v[key].$model = val;
                    _app_.dropdowns[key] = $.trim($(e.target).text());

                    if (on_change) {
                        on_change();
                    }
                }
			}
		});

		var edit_profile_country_app = new Vue({
			el: "#edit_profile_country_form",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				country: "",
				dropdowns: {
					country: "<?php echo cl_translate("Select your country"); ?>"
				}
			},
			validations: {
				country: {
					required: window.validators.required,
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/save_profile_country"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							edit_profile_country_app.submitting = true;
							edit_profile_country_app.unsuccessful_attempt = false;
						},
						success: function(data) {
							if (data.status == 200) {

								$("div#edit_profile_country").modal('hide');
								
								setTimeout(function() {
									SMColibri.spa_reload();
								}, 1000);
							}

							else {
								edit_profile_country_app.unsuccessful_attempt = true;
								edit_profile_country_app.submitting = false;
							}
						}
					});
				},
				dropdown_select: function(key = "none", val = false, e = false, on_change = false) {
                    var _app_ = this;

                    _app_.$v[key].$model = val;
                    _app_.dropdowns[key] = $.trim($(e.target).text());

                    if (on_change) {
                        on_change();
                    }
                }
			}
		});

		var verify_account_app = new Vue({
			el: "#verify_account_form",
			data: {
				verification_status: "<?php echo fetch_or_get($me['verified'], 0); ?>",
				submitting: false,
				unsuccessful_attempt: false,
				invalid_feedback_full_name: "",
				invalid_feedback_text_message: "",
				full_name: "",
				text_message: "",
				is_file_selected: false,
				selected_file_name: "<?php echo cl_translate("Please select a video appeal to the reviewer!"); ?>"
			},
			computed: {
				is_valid_full_name: function() {
					if (this.$v.full_name.required == true && this.$v.full_name.$error) {
						this.invalid_feedback_full_name = "<?php echo cl_translate("Please enter your full name between 3 and 60 characters long!"); ?>";
						return true;
					}

					else {
						return false;
					}
				},
				is_valid_text_message: function() {
					if (this.$v.text_message.required == true && this.$v.text_message.$error) {
						this.invalid_feedback_text_message = "<?php echo cl_translate("Please enter a message for the reviewer, no more than 1200 characters in length!"); ?>";
						return true;
					}

					else {
						return false;
					}
				},
				is_valid_form: function() {
					if(this.$v.$invalid == true || this.is_file_selected != true) {
						return false;
					}

					else {
						return true;
					}
				}
			},
			validations: {
				full_name: {
					required: window.validators.required,
					min_length: window.validators.minLength(3),
					max_length: window.validators.maxLength(60),
				},
				text_message: {
					required: window.validators.required,
					min_length: window.validators.minLength(1),
					max_length: window.validators.maxLength(1200),
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					var _app_ = this;

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/verify_account"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							_app_.submitting           = true;
							_app_.unsuccessful_attempt = false;
						},
						success: function(data) {
							if (data.status == 200) {
								_app_.verification_status = 2;
							}

							else {
								_app_.unsuccessful_attempt = true;
								_app_.submitting = false;
							}
						}
					});
				},
				select_video: function() {
					var _app = $(this.$el);
					_app.find('[data-an="video-message-input"]').trigger('click');
				},
				display_filename: function(e = false) {
					this.selected_file_name = e.target.files[0].name;
					this.is_file_selected   = true;
				}
			}
		});

		var delete_profile_app = new Vue({
			el: "#delete_account_form",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				invalid_feedback_pass: "",
				password: "",
				invalid_pass: false
			},
			computed: {
				is_valid_password: function() {
					if (this.$v.password.required == true && this.$v.password.$error) {
						this.invalid_feedback_pass = "<?php echo cl_translate("Please enter your current password!"); ?>";
						return true;
					}

					else if(this.invalid_pass == true) {
						this.invalid_feedback_pass = "<?php echo cl_translate("The current password you entered is not correct, please check your details and try again!"); ?>";
						return true;
					}

					else {
						this.invalid_feedback_pass = "";
						return false;
					}
				}
			},
			validations: {
				password: {
					required: window.validators.required,
					min_length: window.validators.minLength(6),
					max_length: window.validators.maxLength(20),
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/delete_account"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							delete_profile_app.submitting = true;
							delete_profile_app.unsuccessful_attempt = false;
							delete_profile_app.invalid_pass = false;
						},
						success: function(data) {
							if (data.status == 200) {
								setTimeout(function() {
									SMColibri.spa_reload();
								}, 1000);
							}

							else if(data.err_code == "invalid_pass") {
								delete_profile_app.invalid_pass = true;
								delete_profile_app.submitting = false;
							}

							else {
								delete_profile_app.unsuccessful_attempt = true;
								delete_profile_app.submitting = false;
							}
						}
					});
				}
			}
		});

		var edit_profile_privacy_app = new Vue({
			el: "#edit_account_privacy",
			data: {
				submitting: false,
				unsuccessful_attempt: false,
				profile_privacy: "<?php echo($me['profile_privacy']); ?>",
				contact_privacy: "<?php echo($me['contact_privacy']); ?>",
				index_privacy: "<?php echo($me['index_privacy']); ?>",
				dropdowns: {
					profile_privacy: "",
					contact_privacy: "",
					index_privacy: ""
				}
			},
			validations: {
				profile_privacy: {
					profile_privacy: window.validators.required,
				},
				contact_privacy: {
					contact_privacy: window.validators.required,
				},
				index_privacy: {
					index_privacy: window.validators.required,
				}
			},
			methods: {
				submit_form: function(_self = null) {
					_self.preventDefault();
					var _app_ = this;

					$(_self.target).ajaxSubmit({
						url: "<?php echo cl_link("native_api/settings/save_privacy_settings"); ?>",
						type: 'POST',
						dataType: 'json',
						beforeSend: function() {
							_app_.submitting = true;
							_app_.unsuccessful_attempt = false;
						},
						success: function(data) {
							if (data.status == 200) {
								$("div#edit_account_privacy").modal("hide");

								cl_bs_notify("<?php echo cl_translate("Your changes has been successfully saved!"); ?>");
							}

							else {
								_app_.unsuccessful_attempt = true;
							}
						},
						complete: function() {
							_app_.submitting = false;
						}
					});
				},
				dropdown_select: function(key = "none", val = false, e = false, on_change = false) {
                    var _app_ = this;

                    _app_.$v[key].$model = val;
                    _app_.dropdowns[key] = $.trim($(e.target).text());

                    if (on_change) {
                        on_change();
                    }
                }
			},
			mounted: function() {
				if (this.profile_privacy == 'everyone') {
					this.dropdowns.profile_privacy = "<?php echo cl_translate("Everyone"); ?>";
				}

				else if(this.profile_privacy == 'followers') {
					this.dropdowns.profile_privacy = "<?php echo cl_translate("My followers"); ?>";
				}

				else if(this.profile_privacy == 'nobody') {
					this.dropdowns.profile_privacy = "<?php echo cl_translate("Nobody"); ?>";
				}

				if (this.contact_privacy == 'everyone') {
					this.dropdowns.contact_privacy = "<?php echo cl_translate("Everyone"); ?>";
				}

				else if(this.contact_privacy == 'followed') {
					this.dropdowns.contact_privacy = "<?php echo cl_translate("The people I follow"); ?>";
				}

				if (this.index_privacy == 'Y') {
					this.dropdowns.index_privacy = "<?php echo cl_translate("Yes"); ?>";
				}

				else if(this.index_privacy == 'N') {
					this.dropdowns.index_privacy = "<?php echo cl_translate("No"); ?>";
				}
			}
		});
	});
</script>
