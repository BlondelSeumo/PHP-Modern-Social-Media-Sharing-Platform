<script>
	"use strict";
	
	$(document).ready(function($) {
		var _app = new Vue({
			el: "#vue-conversation-app",
			data: {
				loading_new: false,
				loading_old: false,
				sending: false,
				search_query: "",
				search_inquiries: false,
				message: "",
				update_interval: 5000,
				pause_interval: false,
				loadmore_old: true,
				searching: false,
				search_matches: 0,
				search_curr_match: 0,
				scroll_sr_up: true,
				scroll_sr_down: true,
			},
			computed: {
				is_invalid_form: function() {
					if (this.message.length < 1) {
						return true;
					}

					else {
						return false;
					}
				}
			},
			methods: {
				delete_message: function(e) {
					var event   = $(e);
					var message = event.parents('div[data-list-item]');

					if (message.length) {
						var promise = SMColibri.confirm_action({
							btn_1: "<?php echo cl_translate("Cancel"); ?>",
							btn_2: "<?php echo cl_translate("Delete"); ?>",
							title: "<?php echo cl_translate("Please confirm your actions!"); ?>",
							message: "<?php echo cl_translate("Do you want to delete this message from {@interloc_name@}? Please note that this action cannot be undone!", array("interloc_name" => $cl['interlocutor']['name'])); ?>",
						});

						promise.done(function() {
				            $.ajax({
				            	url: '<?php echo cl_link("native_api/conversation/delete_message"); ?>',
				            	type: 'POST',
				            	dataType: 'json',
				            	data: {id: message.data('list-item')},
				            }).done(function(data) {
				            	if (data.status != 200) {
				            		cl_bs_notify("<?php echo cl_translate("An error occurred while processing your request. Please try again later."); ?>",3000);
				            	}
				            }).always(function() {
				            	$("div.confirm-actions-modal").modal("hide");

				            	message.remove();
				            });
				        });

						promise.fail(function() {
				            $("div.confirm-actions-modal").modal("hide");
				        });
					}
				},
				delete_chat: function() {
					var _app_   = this;
					var promise = SMColibri.confirm_action({
						btn_1: "<?php echo cl_translate("Cancel"); ?>",
						btn_2: "<?php echo cl_translate("Delete"); ?>",
						title: "<?php echo cl_translate("Please confirm your actions!"); ?>",
						message: "<?php echo cl_translate("Do you want to delete this chat with {@interloc_name@}? Please note that this action cannot be undone!", array("interloc_name" => $cl['interlocutor']['name'])); ?>",
					});

					promise.done(function() {
			            $.ajax({
			            	url: '<?php echo cl_link("native_api/conversation/delete_chat"); ?>',
			            	type: 'POST',
			            	dataType: 'json',
			            	beforeSend: function() {
			            		$("div.confirm-actions-modal").modal("hide");
			            		_app_.pause_interval = true;
			            	}
			            }).done(function(data) {
			            	if (data.status != 200) {
			            		cl_bs_notify("<?php echo cl_translate("An error occurred while processing your request. Please try again later."); ?>",3000);
			            	}

			            	else {
			            		delay(function() {
			            			cl_redirect('<?php echo cl_link("chats"); ?>');
			            		}, 1000);
			            	}
			            });
			        });

					promise.fail(function() {
			            $("div.confirm-actions-modal").modal("hide");
			        });
				},
				clear_chat: function() {
					var _app_   = this;
					var msg_ls  = $(_app_.$el).find('div[data-an="messages-list"]'); 
					var promise = SMColibri.confirm_action({
						btn_1: "<?php echo cl_translate("Cancel"); ?>",
						btn_2: "<?php echo cl_translate("Clear"); ?>",
						title: "<?php echo cl_translate("Please confirm your actions!"); ?>",
						message: "<?php echo cl_translate("Are you sure you want to delete all messages in the chat with {@interloc_name@}? Please note that this action cannot be undone!", array("interloc_name" => $cl['interlocutor']['name'])); ?>",
					});

					promise.done(function() {
			            $.ajax({
			            	url: '<?php echo cl_link("native_api/conversation/clear_chat"); ?>',
			            	type: 'POST',
			            	dataType: 'json',
			            	beforeSend: function() {
			            		$("div.confirm-actions-modal").modal("hide");
			            	}
			            }).done(function(data) {
			            	if (data.status != 200) {
			            		cl_bs_notify("<?php echo cl_translate("An error occurred while processing your request. Please try again later."); ?>",3000);
			            	}
			            	else {
			            		msg_ls.empty();
			            		cl_bs_notify("<?php echo cl_translate("Your conversation has been deleted successfully"); ?>",1500);
			            	}
			            });
			        });

					promise.fail(function() {
			            $("div.confirm-actions-modal").modal("hide");
			        });
				},
				send_message: function(e) {
					e.preventDefault();

					var _app_ = this;

					if (_app_.sending != true) {
						$(e.target).ajaxSubmit({
							url: '<?php echo cl_link("native_api/conversation/send_message"); ?>',
							type: 'POST',
							dataType: 'json',
							data: {
								message: _app_.message,
								hash: "<?php echo fetch_or_get($cl['csrf_token'],'none'); ?>",
								beforeSend: function() {
									_app_.pause_interval = true;
									_app_.sending        = true;
								}
							},
							success: function(data) {
								if (data.status == 200) {
									_app_.reset_form();
									_app_.get_new_messages();
								}
								else {
									cl_bs_notify("<?php echo cl_translate("An error occurred while processing your request. Please try again later."); ?>",3000);
								}
							},
							complete: function() {
								_app_.sending = false;
							}
						});
					}

					else {
						return false;
					}
				},
				reset_form: function() {
					this.message = "";

					$(this.$el).find('[data-an="media-input"]').val('');

					<?php if (not_empty($cl["can_contact"])): ?>
						if (window.mobileCheck() != true) {
							$(this.$el).find('input[data-an="msg-input"]').get(0).emojioneArea.setText("");
						}
					<?php endif; ?>
				},
				select_image: function() {
					$(_app.$el).find('input[data-an="media-input"]').trigger('click');
				},
				send_image: function(event = false) {
					var _app_ = this;

					if (_app_.sending != true) {
						if (event) {
							_app_.sending = true;
							var form_data = new FormData();
							form_data.append('image', event.target.files[0]);
							form_data.append('hash', "<?php echo fetch_or_get($cl['csrf_token'],'none'); ?>");
							
							$.ajax({
								url: '<?php echo cl_link("native_api/conversation/send_message"); ?>',
								type: 'POST',
								dataType: 'json',
								enctype: 'multipart/form-data',
								data: form_data,
								cache: false,
						        contentType: false,
						        processData: false,
						        timeout: 600000,
								success: function(data) {
									if (data.status == 200) {
										_app_.reset_form();
										_app_.get_new_messages();
									}
									else {
										cl_bs_notify("<?php echo cl_translate("An error occurred while processing your request. Please try again later."); ?>",3000);
									}
								},
								complete: function() {
									_app_.sending = false;
								}
							});
						}
					}
					else {
						return false;
					}
				},
				scroll_down: function(speed = 0) {
					$(this.$el).find('div[data-an="messages-list"]').animate({
						scrollTop: ($(this.$el).find('div[data-an="messages-list"]').get(0).scrollHeight)
					}, speed);
				},
				get_new_messages: function() {
					var _app_    = this;
					var msg_ls   = $(_app_.$el).find('div[data-an="messages-list"]'); 
					var last_msg = msg_ls.find('div[data-list-item]').last();
					var offset   = last_msg.data('list-item');

					if (_app_.loading_new != true) {
						_app_.loading_new = true;

						$.ajax({
							url: '<?php echo cl_link("native_api/conversation/get_new_messages"); ?>',
							type: 'GET',
							dataType: 'json',
							data: {
								offset: (($.isNumeric(offset)) ? offset : 0),
								hash: "<?php echo fetch_or_get($cl['csrf_token'],'none'); ?>"
							},
						}).done(function(data) {
							if (data.status == 200) {
								var messages = $(data.html);
								messages.each(function(index, el) {
									msg_ls.append($(el).addClass('animated fadeIn'));
								});

								_app_.scroll_down();
							}
						}).always(function() {
							if (_app_.pause_interval) {
								_app_.pause_interval = false;
							}

							_app_.loading_new = false;
						});
					}
				},
				get_old_messages: function(e = false) {
					var event = $(e.target);
					var _app_ = this;

					if (_app_.loading_old != true) {
						if (_app_.loadmore_old && cl_empty(_app_.searching)) {
							var scroll_top = $(event).scrollTop();
							if (scroll_top <= 0) {
								var msg_ls   = event; 
								var last_msg = msg_ls.find('div[data-list-item]').first();
								var offset   = last_msg.data('list-item');

								if ($.isNumeric(offset) && offset) {
									$.ajax({
										url: '<?php echo cl_link("native_api/conversation/get_old_messages"); ?>',
										type: 'GET',
										dataType: 'json',
										data: {
											offset: offset,
											hash: "<?php echo fetch_or_get($cl['csrf_token'],'none'); ?>"
										},
										beforeSend: function() {
											_app_.loadmore_old = false;
											_app_.loading_old  = true;
										}
									}).done(function(data) {
										if (data.status == 200) {
											var messages = $(data.html);
											messages.each(function(index, el) {
												msg_ls.prepend($(el).addClass('animated fadeIn'));
											});

											_app_.loadmore_old = true;

											msg_ls.scroll2inner(last_msg, 0);
										}
									}).always(function() {
										_app_.loading_old = false;
									});
								}
							} 
						}
					}
					else {
						return false;
					}
				},
				cancel_search: function() {
					var _app_  = this;
					var msg_ls = $(_app_.$el).find('div[data-an="messages-list"]');

					msg_ls.html('').promise().done(function() {
						_app_.searching      = false;
						_app_.search_query   = "";
						_app_.get_new_messages();
					});
				},
				search_messages: function() {
					var _app_  = this;
					var msg_ls = $(_app_.$el).find('div[data-an="messages-list"]');

					delay(function() {
						if (_app_.search_query.length >= 2) {
							_app_.pause_interval   = true;
							_app_.search_inquiries = true;

							$.ajax({
								url: '<?php echo cl_link("native_api/conversation/search_messages"); ?>',
								type: 'GET',
								dataType: 'json',
								data: {
									query: _app_.search_query,
									hash: "<?php echo fetch_or_get($cl['csrf_token'],'none'); ?>"
								}
							}).done(function(data) {
								if (data.status == 200) {
									_app_.search_matches    = data.tm;
									_app_.search_curr_match = 1;

									msg_ls.html(data.html).promise().done(function() {
										msg_ls.scroll2inner(msg_ls.find('div[data-sqm]').first().addClass('active-sqm'), 0);
									});
								}
								else {
									msg_ls.html('<div class="empty-search-result"><span><?php echo cl_translate("No matches found!"); ?></span></div>');
									_app_.search_matches = 0;
								}
							}).always(function() {
								_app_.searching        = true;
								_app_.search_inquiries = false;
							});
						}
					},800);
				},
				scroll_sr: function(dir = false) {

					var _app_      = this;
					var msg_ls     = $(_app_.$el).find('div[data-an="messages-list"]');
					var active_sqm = msg_ls.find('div[data-sqm].active-sqm');

					if (dir == 'up' && active_sqm.length) {
						var prev = active_sqm.prevAll('div[data-sqm]').first();

						if (prev.length) {
							msg_ls.scroll2inner(prev.addClass('active-sqm'), 0);
							active_sqm.removeClass('active-sqm');

							_app_.search_curr_match -= Number(prev.data('sqm'));
						}
					}
					else {
						var next = active_sqm.nextAll('div[data-sqm]').first();
						if (next.length) {
							msg_ls.scroll2inner(next.addClass('active-sqm'), 0);
							active_sqm.removeClass('active-sqm');

							_app_.search_curr_match += Number(next.data('sqm'));
						}
					}

					_app_.scroll_sr_up   = (active_sqm.prevAll('div[data-sqm]').length > 0);
					_app_.scroll_sr_down = (active_sqm.nextAll('div[data-sqm]').length > 0);
				},
				search_messages_onsubmit: function(e = false) {
					e.preventDefault();
					
					this.search_messages();
				}
			},
			mounted: function() {
				var _app_ = this;
				_app_.scroll_down();

				SMColibri.extend_vue('chat', _app_);

				setInterval(function() {
					if (_app_.pause_interval != true) {
						_app_.get_new_messages();
					}
				}, _app_.update_interval);

				<?php if (not_empty($cl["can_contact"])): ?>
					if (window.mobileCheck() != true) {

						var emoji_filters = Object({
							recent: {
								title: "<?php echo cl_translate("Recent"); ?>"
							},
							smileys_people: {
						        title: "<?php echo cl_translate("Emoticons and People"); ?>",
						    },
							animals_nature: {
						        title: "<?php echo cl_translate("Animals & Nature"); ?>",
						    },
							food_drink: {
						        title: "<?php echo cl_translate("Food & Drink"); ?>",
						    },
							activity: {
						        title: "<?php echo cl_translate("Activity"); ?>",
						    },
							travel_places: {
						        title: "<?php echo cl_translate("Travel & Places"); ?>",
						    },
							objects: {
						        title: "<?php echo cl_translate("Objects"); ?>",
						    },
							symbols: {
						        title: "<?php echo cl_translate("Symbols"); ?>",
						    },
							flags: {
						        title: "<?php echo cl_translate("Flags"); ?>",
						    }
						});

						$(_app_.$el).find('input[data-an="msg-input"]').emojioneArea({
							pickerPosition: "top",
							placeholder: "<?php echo cl_translate("Write a message ..."); ?>",
							search: false,
							filters: emoji_filters
						});

						$(_app_.$el).find('input[data-an="msg-input"]').get(0).emojioneArea.on('emojibtn.click', function(event) {
							_app_.message = $(_app_.$el).find('input[data-an="msg-input"]').get(0).emojioneArea.getText();
						});

						$(_app_.$el).find('input[data-an="msg-input"]').get(0).emojioneArea.on('keyup', function(event) {
							_app_.message = $(_app_.$el).find('input[data-an="msg-input"]').get(0).emojioneArea.getText();
						});
					}
				<?php endif; ?>
			}
		});
	});
</script>